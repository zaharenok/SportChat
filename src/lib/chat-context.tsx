"use client";

import React, { createContext, useContext, useState, useCallback } from 'react';
import { workoutsApi, goalsApi, chatApi, Goal, Exercise } from './client-api';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  dayId?: string; // –°–≤—è–∑—ã–≤–∞–µ–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–Ω–µ–º
  hasPhoto?: boolean; // –ï—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
  photoPreview?: string; // Base64 –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
}

interface ChatContextType {
  // –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
  messages: Message[];
  isLoading: boolean;
  
  // –ú–µ—Ç–æ–¥—ã
  addMessage: (message: Omit<Message, 'id' | 'timestamp'>) => void;
  setMessages: (messages: Message[]) => void;
  setLoading: (loading: boolean) => void;
  sendMessage: (text: string, userId: string, dayId: string, onWorkoutSaved?: () => void, userEmail?: string, userName?: string) => Promise<void>;
  clearMessages: () => void;
}

const ChatContext = createContext<ChatContextType | undefined>(undefined);

export const useChatContext = () => {
  const context = useContext(ChatContext);
  if (!context) {
    throw new Error('useChatContext must be used within a ChatProvider');
  }
  return context;
};

interface ChatProviderProps {
  children: React.ReactNode;
}

export const ChatProvider = ({ children }: ChatProviderProps) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const addMessage = useCallback((message: Omit<Message, 'id' | 'timestamp'>) => {
    const newMessage: Message = {
      ...message,
      id: Date.now().toString() + Math.random(),
      timestamp: new Date(),
    };
    setMessages(prev => [...prev, newMessage]);
  }, []);

  const addMessageWithDelay = useCallback((text: string, delay: number, dayId?: string, userId?: string) => {
    setTimeout(async () => {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      addMessage({
        text,
        isUser: false,
        dayId
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      if (dayId && userId) {
        try {
          await chatApi.create(userId, dayId, text, false);
          console.log("üíæ Message saved to database:", text.substring(0, 50) + "...");
        } catch (error) {
          console.error("‚ùå Error saving message to database:", error);
        }
      }
    }, delay);
  }, [addMessage]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  const updateGoalsFromExercises = useCallback(async (exercises: Exercise[], userId: string) => {
    try {
      console.log("üéØ Checking goals for exercise updates...");
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const goals = await goalsApi.getAll(userId);
      console.log("üìã User goals:", goals.map((g: Goal) => ({ title: g.title, current: g.current_value, target: g.target_value })));
      
      for (const exercise of exercises) {
        const exerciseName = exercise.name.toLowerCase();
        const totalReps = exercise.reps * exercise.sets;
        
        console.log(`üèãÔ∏è Processing exercise: ${exerciseName}, total reps: ${totalReps}`);
        
        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ü–µ–ª–∏
        for (const goal of goals) {
          const goalTitle = goal.title.toLowerCase();
          console.log(`üîç Comparing exercise "${exerciseName}" with goal "${goalTitle}"`);
          
          // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ —Ü–µ–ª–µ–π
          const isMatchingGoal = 
            // –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è - —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã
            ((exerciseName.includes("–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏") || exerciseName.includes("–ø–æ–¥—Ç—è–≥–∏–≤–∞")) && 
             (goalTitle.includes("–ø–æ–¥—Ç—è–≥–∏–≤–∞") || goalTitle.includes("–ø–æ–¥—Ç—è–≥–∞—Ç") || goalTitle.includes("–ø–æ–¥—Ç—è–Ω—É—Ç"))) ||
            // –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è  
            ((exerciseName.includes("–ø—Ä–∏—Å–µ–¥–∞–Ω–∏") || exerciseName.includes("–ø—Ä–∏—Å–µ–¥–∞")) && 
             (goalTitle.includes("–ø—Ä–∏—Å–µ–¥–∞") || goalTitle.includes("–ø—Ä–∏—Å–µ—Å—Ç"))) ||
            // –û—Ç–∂–∏–º–∞–Ω–∏—è
            ((exerciseName.includes("–æ—Ç–∂–∏–º–∞–Ω–∏") || exerciseName.includes("–æ—Ç–∂–∏–º–∞")) && 
             (goalTitle.includes("–æ—Ç–∂–∏–º–∞") || goalTitle.includes("–æ—Ç–∂–∞—Ç"))) ||
            // –ü–ª–∞–Ω–∫–∞
            (exerciseName.includes("–ø–ª–∞–Ω–∫") && goalTitle.includes("–ø–ª–∞–Ω–∫")) ||
            // –ü—Ä–µ—Å—Å
            (exerciseName.includes("–ø—Ä–µ—Å—Å") && goalTitle.includes("–ø—Ä–µ—Å—Å"));
          
          console.log(`ü§î Is matching goal? ${isMatchingGoal}`);
          
          if (isMatchingGoal) {
            const newValue = Math.max(0, goal.current_value - totalReps);
            console.log(`üéØ Updating goal "${goal.title}": ${goal.current_value} - ${totalReps} = ${newValue}`);
            
            try {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å
              const updatedGoal = await goalsApi.update(goal.id, {
                currentValue: newValue,
                isCompleted: newValue <= 0
              });
              
              console.log(`‚úÖ Goal updated successfully:`, updatedGoal);
              console.log(`üìä Progress: ${newValue}/${goal.target_value} (${Math.round((newValue/goal.target_value)*100)}%)`);
            } catch (error) {
              console.error(`‚ùå Failed to update goal "${goal.title}":`, error);
            }
          } else {
            console.log(`‚è≠Ô∏è Goal "${goalTitle}" doesn't match exercise "${exerciseName}"`);
          }
        }
      }
    } catch (error) {
      console.error("‚ùå Error updating goals:", error);
    }
  }, []);

  const sendMessage = useCallback(async (text: string, userId: string, dayId: string, onWorkoutSaved?: () => void, userEmail?: string, userName?: string) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userMessage = {
      text: text.trim(),
      isUser: true,
      dayId
    };
    
    addMessage(userMessage);
    setIsLoading(true);

    try {
      console.log("üåç GLOBAL: Sending message to webhook:", text);

      const response = await fetch("/api/webhook", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json",
        },
        body: JSON.stringify({
          message: text,
          user_email: userEmail || "user@example.com",
          user_name: userName || "User",
        }),
      });

      if (!response.ok) {
        console.error("HTTP error:", response.status, response.statusText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log("üåç GLOBAL: Full webhook response:", JSON.stringify(data, null, 2));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      let output = null;
      
      if (data && Array.isArray(data) && data.length > 0 && data[0] && data[0].output) {
        output = data[0].output;
        console.log("üåç GLOBAL: Found array response structure");
      } else if (data && !Array.isArray(data) && 'output' in data) {
        output = data.output;
        console.log("üåç GLOBAL: Found object response structure");
      }

      if (output) {
        console.log("üåç GLOBAL: Extracted output:", output);

        // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (output.message) {
          console.log("üåç GLOBAL: Adding main message with delay");
          addMessageWithDelay(output.message, 1000, dayId, userId);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
        if (output.workout_logged && output.parsed_exercises && output.parsed_exercises.length > 0) {
          console.log("üèãÔ∏è GLOBAL: Saving workout data:", {
            userId,
            dayId,
            exercises: output.parsed_exercises
          });
          
          try {
            const savedWorkout = await workoutsApi.create(
              userId,
              dayId,
              Date.now().toString(), // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
              output.parsed_exercises
            );
            console.log("‚úÖ GLOBAL: Workout saved successfully:", savedWorkout);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            await updateGoalsFromExercises(output.parsed_exercises, userId);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            if (onWorkoutSaved) {
              onWorkoutSaved();
            }
          } catch (error) {
            console.error("‚ùå GLOBAL: Error saving workout:", error);
          }
        } else {
          console.log("‚ÑπÔ∏è GLOBAL: No workout to save:", {
            workout_logged: output.workout_logged,
            parsed_exercises: output.parsed_exercises
          });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (output.suggestions && output.suggestions.length > 0) {
          console.log("üåç GLOBAL: Adding suggestions with delay");
          const suggestionsText = "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + output.suggestions.map((s: string, i: number) => `${i + 1}. ${s}`).join("\n");
          addMessageWithDelay(suggestionsText, 6000, dayId, userId);
        }
      } else {
        console.log("üåç GLOBAL: No valid data structure found in response");
        addMessageWithDelay("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook.", 1000, dayId, userId);
      }

    } catch (error) {
      console.error("üåç GLOBAL: Error sending message:", error);
      
      // Fallback –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      if (text.toLowerCase().includes("—Ç–µ—Å—Ç")) {
        addMessageWithDelay("–û—Ç–ª–∏—á–Ω–æ! –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ üí™", 1000, dayId, userId);
        addMessageWithDelay("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n1. –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n2. –°–ª–µ–¥–∏ –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º\n3. –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –æ—Ç–¥—ã—Ö", 6000, dayId, userId);
      } else {
        addMessageWithDelay("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", 1000, dayId, userId);
      }
    } finally {
      setIsLoading(false);
    }
  }, [addMessage, addMessageWithDelay, updateGoalsFromExercises]);

  const clearMessages = useCallback(() => {
    setMessages([]);
  }, []);

  const value: ChatContextType = {
    messages,
    isLoading,
    addMessage,
    setMessages,
    setLoading: setIsLoading,
    sendMessage,
    clearMessages
  };

  return (
    <ChatContext.Provider value={value}>
      {children}
    </ChatContext.Provider>
  );
};