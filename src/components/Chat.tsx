"use client";

import { useState, useRef, useEffect } from "react";
import { Send, MessageCircle, Mic, Square, Camera, Image, X, Paperclip } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { chatApi, Day, User, ChatMessage } from "@/lib/client-api";
import { useChatContext } from "@/lib/chat-context";
import { useLanguage } from "@/lib/language-context";
import { TypewriterText } from "./TypewriterText";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API
interface ApiResponse {
  success: boolean;
  message?: string;
  suggestions?: string;
  next_workout_recommendation?: string;
  workout_logged?: boolean;
  parsed_exercises?: Array<{
    name: string;
    weight: number;
    sets: number;
    reps: number;
  }>;
  recognizedText?: string;
  isFirstAudioResponse?: boolean; // –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞—É–¥–∏–æ
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ webhook –æ—Ç–≤–µ—Ç–æ–≤
interface WebhookResponseAudio {
  text: string;
  usage: {
    type: string;
    seconds: number;
  };
}

// –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è n8n workflow (–∞—É–¥–∏–æ)
interface WebhookResponseTranscription {
  text_transcribed: string;
}

// –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è n8n workflow (—Ñ–æ—Ç–æ)
interface WebhookResponsePhoto {
  photo_text: string;
}

interface WebhookResponseMain {
  output: {
    message: string;
    workout_logged?: boolean;
    parsed_exercises?: Array<{
      name: string;
      weight: number;
      sets: number;
      reps: number;
    }>;
    suggestions?: string | string[];
    next_workout_recommendation?: string;
  };
}

// –û–±—â–∏–π —Ç–∏–ø –¥–ª—è webhook –æ—Ç–≤–µ—Ç–∞
type WebhookResponse =
  | WebhookResponseAudio[]
  | WebhookResponseMain[]
  | WebhookResponseTranscription[]
  | WebhookResponsePhoto[]
  | (WebhookResponseTranscription | WebhookResponseMain)[] // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∞—É–¥–∏–æ
  | (WebhookResponsePhoto | WebhookResponseMain)[] // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ
  | ApiResponse  // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç


interface ChatProps {
  selectedDay: Day | null;
  selectedUser: User;
  onWorkoutSaved?: () => void; // –ö–æ–ª–±–µ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
}

export function Chat({ selectedDay, selectedUser, onWorkoutSaved }: ChatProps) {
  const { messages, isLoading, setMessages, sendMessage, addMessage, setLoading } = useChatContext();
  const { t } = useLanguage();
  const [inputMessage, setInputMessage] = useState("");
  const [isInitialized, setIsInitialized] = useState(false);
  const [typingMessageId, setTypingMessageId] = useState<string | null>(null);
  const [isNewMessage, setIsNewMessage] = useState(false);
  
  // –ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [isRecording, setIsRecording] = useState(false);
  const [isProcessingAudio, setIsProcessingAudio] = useState(false);
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);

  // –°—á–µ—Ç—á–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  const [processingTimer, setProcessingTimer] = useState(0);
  const [loadingTimer, setLoadingTimer] = useState(0);
  
  // –§–æ—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [selectedPhoto, setSelectedPhoto] = useState<File | null>(null);
  const [photoPreview, setPhotoPreview] = useState<string | null>(null);
  const [isTakingPhoto, setIsTakingPhoto] = useState(false);
  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π
  const [isAttachmentMenuOpen, setIsAttachmentMenuOpen] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã—Ö –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–æ–≤
  const [isWaitingForSecondResponse, setIsWaitingForSecondResponse] = useState(false);
  const [firstAudioResponse, setFirstAudioResponse] = useState<string | null>(null);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    loadChatHistory();
  }, [selectedDay]); // eslint-disable-line react-hooks/exhaustive-deps

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (isAttachmentMenuOpen) {
        const target = event.target as HTMLElement;
        const attachmentButton = target.closest('.attachment-menu-container');
        if (!attachmentButton) {
          setIsAttachmentMenuOpen(false);
        }
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isAttachmentMenuOpen]);

  const loadChatHistory = async () => {
    if (!selectedDay) {
      setMessages([]);
      setIsInitialized(true);
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
      setTypingMessageId(null);
      setIsNewMessage(false);
      return;
    }

    try {
      const chatMessages = await chatApi.getByDay(selectedDay.id);
      
      if (chatMessages.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ
        const dayDate = new Date(selectedDay.date + 'T00:00:00');
        const today = new Date();
        const isToday = selectedDay.date === today.toISOString().split('T')[0];
        
        const dayOfWeek = dayDate.toLocaleDateString('ru-RU', { weekday: 'long' });
        const dayMonth = dayDate.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' });
        
        let welcomeText;
        if (isToday) {
          welcomeText = `–ü—Ä–∏–≤–µ—Ç! üåü –°–µ–≥–æ–¥–Ω—è ${dayOfWeek}, ${dayMonth}. –ë—É–¥–µ—Ç –ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞? –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å!`;
        } else {
          welcomeText = `–ü—Ä–∏–≤–µ—Ç! üí™ –≠—Ç–æ ${dayOfWeek}, ${dayMonth}. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å?`;
        }
        
        const welcomeMessage = {
          id: "welcome",
          text: welcomeText,
          isUser: false,
          timestamp: new Date(),
          dayId: selectedDay.id
        };
        setMessages([welcomeMessage]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        await chatApi.create(selectedUser.id, selectedDay.id, welcomeMessage.text, false);
      } else {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const localMessages = chatMessages.map((msg: ChatMessage) => ({
          id: msg.id,
          text: msg.message,
          isUser: msg.is_user,
          timestamp: new Date(msg.timestamp),
          dayId: selectedDay.id
        }));
        setMessages(localMessages);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
      setMessages([]);
    } finally {
      setIsInitialized(true);
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏
      setTypingMessageId(null);
      setIsNewMessage(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç webhook
  const parseWebhookResponse = (data: WebhookResponse): ApiResponse => {
    console.log('üîÑ parseWebhookResponse input:', JSON.stringify(data, null, 2));

    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç —Å text_transcribed
    if (data && typeof data === 'object' && 'text_transcribed' in data && !('output' in data) && !Array.isArray(data)) {
      const transcriptionData = data as WebhookResponseTranscription;
      console.log('üé§ First audio response detected:', transcriptionData.text_transcribed);
      return {
        success: true,
        recognizedText: transcriptionData.text_transcribed,
        message: undefined, // –ù–µ—Ç AI –æ—Ç–≤–µ—Ç–∞ –≤ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        isFirstAudioResponse: true, // –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        workout_logged: false,
        parsed_exercises: []
      };
    }

    // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤
    if (Array.isArray(data)) {
      console.log('üìã Processing array response with', data.length, 'items');
      let recognizedText: string | undefined;
      let aiResponse: ApiResponse | undefined;

      // –ò—â–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞—É–¥–∏–æ –∏ –æ—Ç–≤–µ—Ç –ò–ò –≤ –º–∞—Å—Å–∏–≤–µ
      for (const item of data) {
        console.log('üîç Processing item:', typeof item, item);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å text_transcribed (–∏–∑ –≤–∞—à–µ–≥–æ n8n workflow)
        if (item && 'text_transcribed' in item) {
          recognizedText = (item as { text_transcribed: string }).text_transcribed;
          console.log('üé§ Found text_transcribed format:', recognizedText);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Å photo_text (–∏–∑ –≤–∞—à–µ–≥–æ n8n workflow –¥–ª—è —Ñ–æ—Ç–æ)
        if (item && 'photo_text' in item) {
          recognizedText = (item as { photo_text: string }).photo_text;
          console.log('üì∑ Found photo_text format:', recognizedText);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–∞—Ä—ã–π Response audio —Ñ–æ—Ä–º–∞—Ç (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
        if (item && 'text' in item && 'usage' in item) {
          const audioItem = item as WebhookResponseAudio;
          recognizedText = audioItem.text;
          console.log('üé§ Found Response audio format:', audioItem.text);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–≤–µ—Ç –ò–ò —Å output
        if (item && 'output' in item) {
          const output = (item as { output: { 
            message: string; 
            suggestions?: string | string[]; 
            next_workout_recommendation?: string; 
            workout_logged?: boolean; 
            parsed_exercises?: Array<{ name: string; weight: number; sets: number; reps: number }>;
            recognized_text?: string; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
          } }).output;
          console.log('ü§ñ Found AI response format:', output);
          
          // –ï—Å–ª–∏ –≤ output –µ—Å—Ç—å recognized_text, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          if (output.recognized_text && !recognizedText) {
            recognizedText = output.recognized_text;
            console.log('üé§ Found recognized text in output:', output.recognized_text);
          }
          
          aiResponse = {
            success: true,
            message: output.message,
            suggestions: Array.isArray(output.suggestions) ? output.suggestions.join('\n\n') : output.suggestions,
            next_workout_recommendation: output.next_workout_recommendation,
            workout_logged: output.workout_logged || false,
            parsed_exercises: output.parsed_exercises || []
          };
          console.log('‚úÖ Created aiResponse:', aiResponse);
        }
      }

      console.log('üîÑ After processing all items:', { recognizedText, aiResponse });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–±–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      if (aiResponse) {
        const finalResult = {
          ...aiResponse,
          recognizedText: recognizedText // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        };
        console.log('‚úÖ Returning aiResponse result:', finalResult);
        return finalResult;
      } else if (recognizedText) {
        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò
        return {
          success: true,
          recognizedText: recognizedText,
          message: undefined, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò –ø–æ–∫–∞ –µ–≥–æ –Ω–µ—Ç
          suggestions: undefined,
          next_workout_recommendation: undefined,
          workout_logged: false,
          parsed_exercises: []
        };
      }
    }
    
    // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const fallbackData = data as ApiResponse;
    return {
      success: fallbackData.success ?? true,
      recognizedText: fallbackData.recognizedText,
      message: fallbackData.message,
      suggestions: fallbackData.suggestions,
      next_workout_recommendation: fallbackData.next_workout_recommendation,
      workout_logged: fallbackData.workout_logged || false,
      parsed_exercises: fallbackData.parsed_exercises || []
    };
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ
  const handlePhotoSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedPhoto(file);
      const reader = new FileReader();
      reader.onload = (e) => setPhotoPreview(e.target?.result as string);
      reader.readAsDataURL(file);
    }
  };

  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: 'environment' } // –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–æ–≤
      });
      setCameraStream(stream);
      setIsTakingPhoto(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ');
    }
  };

  const capturePhoto = () => {
    if (!cameraStream) return;

    const video = document.getElementById('camera-video') as HTMLVideoElement;
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');

    if (video && context) {
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      context.drawImage(video, 0, 0);
      
      canvas.toBlob((blob) => {
        if (blob) {
          const file = new File([blob], `photo-${Date.now()}.jpg`, { type: 'image/jpeg' });
          setSelectedPhoto(file);
          setPhotoPreview(canvas.toDataURL());
          stopCamera();
        }
      }, 'image/jpeg', 0.8);
    }
  };

  const stopCamera = () => {
    if (cameraStream) {
      cameraStream.getTracks().forEach(track => track.stop());
      setCameraStream(null);
    }
    setIsTakingPhoto(false);
  };

  const removePhoto = () => {
    setSelectedPhoto(null);
    setPhotoPreview(null);
  };

  const scrollToBottom = () => {
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const scrollWithRetry = (attempt: number = 0) => {
      if (messagesEndRef.current && attempt < 3) {
        console.log(`üîÑ Executing scroll to bottom (attempt ${attempt + 1})`);
        messagesEndRef.current.scrollIntoView({ 
          behavior: "smooth",
          block: "end",
          inline: "nearest"
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
        setTimeout(() => {
          if (messagesEndRef.current) {
            const container = messagesEndRef.current.parentElement;
            if (container) {
              const isAtBottom = container.scrollTop + container.clientHeight >= container.scrollHeight - 10;
              if (!isAtBottom) {
                // –ï—Å–ª–∏ –Ω–µ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞, –¥–µ–ª–∞–µ–º –µ—â–µ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É
                console.log('üîÑ Not fully scrolled, retrying...');
                scrollWithRetry(attempt + 1);
              } else {
                console.log('‚úÖ Successfully scrolled to bottom');
              }
            }
          }
        }, 300);
      }
    };
    
    setTimeout(() => scrollWithRetry(), 100);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
  const processMessageSequence = (result: ApiResponse, recognizedText?: string) => {
    let currentDelay = 0;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (recognizedText) {
      console.log('üë§ Adding recognized user message to chat:', recognizedText);
      addMessage({
        text: recognizedText,
        isUser: true,
        dayId: selectedDay!.id
      });
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      setTimeout(() => scrollToBottom(), 300);
      currentDelay += 500; // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º —Å–∏—Å—Ç–µ–º—ã
    } else if (result.message) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –Ω–æ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò, –¥–æ–±–∞–≤–ª—è–µ–º placeholder
      console.log('üé§ Adding voice message placeholder');
      addMessage({
        text: `üé§ ${t('chat.voiceMessage')}`,
        isUser: true,
        dayId: selectedDay!.id
      });
      setTimeout(() => scrollToBottom(), 300);
      currentDelay += 500;
    }
    
    // 1. –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã (—Å—Ä–∞–∑—É)
    if (result.message) {
      setTimeout(() => {
        console.log('ü§ñ Adding main response to chat');
        const botMessage = {
          text: result.message!,
          isUser: false,
          dayId: selectedDay!.id
        };
        
        setIsNewMessage(true);
        addMessage(botMessage);
        
        // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        setTimeout(() => scrollToBottom(), 300);
      }, currentDelay);
      currentDelay += 4000; // 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    }
    
    // 2. –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–µ–π (—á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
    if (result.workout_logged && result.parsed_exercises && result.parsed_exercises.length > 0) {
      setTimeout(() => {
        console.log('üéØ Adding goal updates to chat');
        const goalUpdateMessage = {
          text: "üéØ –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π...",
          isUser: false,
          dayId: selectedDay!.id
        };
        
        setIsNewMessage(true);
        addMessage(goalUpdateMessage);
        
        // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ü–µ–ª—è—Ö
        setTimeout(() => scrollToBottom(), 300);
      }, currentDelay);
      currentDelay += 4000; // 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    }
    
    // 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ)
    if (result.suggestions) {
      setTimeout(() => {
        console.log('üí° Adding suggestions to chat:', result.suggestions);
        const suggestionsMessage = {
          text: result.suggestions!,
          isUser: false,
          dayId: selectedDay!.id
        };
        
        setIsNewMessage(true);
        addMessage(suggestionsMessage);
        
        // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        setTimeout(() => scrollToBottom(), 300);
      }, currentDelay);
      currentDelay += 4000; // 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    }
    
    // 4. –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (—á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ)
    if (result.next_workout_recommendation) {
      setTimeout(() => {
        console.log('üèãÔ∏è Adding next workout to chat:', result.next_workout_recommendation);
        const nextWorkoutMessage = {
          text: result.next_workout_recommendation!,
          isUser: false,
          dayId: selectedDay!.id
        };
        
        setIsNewMessage(true);
        addMessage(nextWorkoutMessage);
        
        // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        setTimeout(() => scrollToBottom(), 300);
      }, currentDelay);
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –°–∫—Ä–æ–ª–ª –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–ü–µ—á–∞—Ç–∞–µ—Ç..."
  useEffect(() => {
    if (isLoading) {
      scrollToBottom();
    }
  }, [isLoading]);

  // –°–∫—Ä–æ–ª–ª –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å..."
  useEffect(() => {
    if (isProcessingAudio) {
      console.log('üé§ Processing audio indicator appeared, scrolling to bottom');
      scrollToBottom();
    }
  }, [isProcessingAudio]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
  useEffect(() => {
    const lastMessage = messages[messages.length - 1];
    if (lastMessage && !lastMessage.isUser && !isLoading && isNewMessage && isInitialized) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ (–Ω–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏)
      setTypingMessageId(lastMessage.id);
      setIsNewMessage(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    }
  }, [messages, isLoading, isNewMessage, isInitialized]);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (isInitialized && messages.length > 0) {
      scrollToBottom();
    }
  }, [isInitialized, messages.length]);

  // –°—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isProcessingAudio) {
      setProcessingTimer(0);
      interval = setInterval(() => {
        setProcessingTimer(prev => prev + 1);
      }, 1000);
    } else {
      setProcessingTimer(0);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isProcessingAudio]);

  // –°—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isLoading) {
      setLoadingTimer(0);
      interval = setInterval(() => {
        setLoadingTimer(prev => prev + 1);
      }, 1000);
    } else {
      setLoadingTimer(0);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isLoading]);

  const handleSendMessage = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ª–∏–±–æ —Ç–µ–∫—Å—Ç, –ª–∏–±–æ —Ñ–æ—Ç–æ
    if ((!inputMessage.trim() && !selectedPhoto) || isLoading || !selectedDay) return;

    const messageText = inputMessage.trim();
    const hasPhoto = !!selectedPhoto;
    const photoFile = selectedPhoto;
    
    setInputMessage("");
    removePhoto(); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    // –°–†–ê–ó–£ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const displayMessage = hasPhoto 
      ? (messageText ? `üì∑ ${messageText}` : 'üì∑ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
      : messageText;
    
    console.log('üë§ Adding user message to chat immediately:', displayMessage);
    addMessage({
      text: displayMessage,
      isUser: true,
      dayId: selectedDay.id,
      hasPhoto: hasPhoto,
      photoPreview: photoPreview || undefined
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    setTimeout(() => scrollToBottom(), 100);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API endpoint –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    setLoading(true);
    setIsProcessingAudio(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    try {
      console.log('üì® Sending message via process-message API:', messageText, hasPhoto ? 'with photo' : '');
      
      let response: Response;
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –æ–∂–∏–¥–∞–Ω–∏–∏
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

      try {
        if (hasPhoto && photoFile) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –∫–∞–∫ FormData
          const formData = new FormData();
          formData.append('userId', selectedUser.id);
          formData.append('dayId', selectedDay.id);
          formData.append('message', messageText);
          formData.append('photo', photoFile);
          formData.append('isPhoto', 'true');

          response = await fetch('/api/process-message', {
            method: 'POST',
            body: formData,
            signal: controller.signal
          });
        } else {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π JSON
          response = await fetch('/api/process-message', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              userId: selectedUser.id,
              dayId: selectedDay.id,
              message: messageText
            }),
            signal: controller.signal
          });
        }
        clearTimeout(timeoutId);
      } catch (fetchError) {
        clearTimeout(timeoutId);
        if (fetchError instanceof Error && fetchError.name === 'AbortError') {
          throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (30 —Å–µ–∫)');
        }
        throw fetchError;
      }

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const rawResult = await response.json();
      console.log('‚úÖ Message processed successfully:', rawResult);
      
      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç webhook —Å –ø–æ–º–æ—â—å—é –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
      const result = parseWebhookResponse(rawResult);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      processMessageSequence(result);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –±—ã–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å —Ü–µ–ª–∏
      if (onWorkoutSaved && (result.workout_logged || (result.parsed_exercises && result.parsed_exercises.length > 0))) {
        console.log('üîÑ Notifying about data update (workout/goals)');
        onWorkoutSaved();
      }
      
    } catch (error) {
      console.error('‚ùå Error processing message:', error);
      // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
      await sendMessage(messageText, selectedUser.id, selectedDay.id, onWorkoutSaved, selectedUser.email, selectedUser.name);
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç webhook (–ø–æ–ª–Ω—ã–π AI –æ—Ç–≤–µ—Ç)
  const waitForSecondResponse = async (formData: FormData, signal: AbortSignal): Promise<void> => {
    if (!selectedDay) {
      throw new Error('No selected day for second response');
    }
    console.log('‚è≥ Starting to wait for second webhook response...');

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º (–¥–∞–µ–º –≤—Ä–µ–º—è n8n –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å AI –æ—Ç–≤–µ—Ç)
    await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏

    // –î–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–æ–º—É –∂–µ endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ AI –æ—Ç–≤–µ—Ç–∞
    const secondController = new AbortController();
    const secondTimeoutId = setTimeout(() => secondController.abort(), 25000); // 25 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

    try {
      console.log('üì° Making second request for AI response...');
      const secondResponse = await fetch('/api/process-message', {
        method: 'POST',
        body: formData,
        signal: secondController.signal
      });

      clearTimeout(secondTimeoutId);

      if (!secondResponse.ok) {
        throw new Error(`Second response error ${secondResponse.status}`);
      }

      const secondRawResult = await secondResponse.json();
      console.log('‚úÖ Second response received:', JSON.stringify(secondRawResult, null, 2));

      const secondResult = parseWebhookResponse(secondRawResult);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π AI –æ—Ç–≤–µ—Ç (–Ω–µ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç —Å–Ω–æ–≤–∞)
      if (secondResult.isFirstAudioResponse) {
        console.log('‚ö†Ô∏è Received first response again, waiting more...');
        // –ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –ø—Ä–∏—à–µ–ª –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç, –¥–µ–ª–∞–µ–º –µ—â–µ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É —Å –±–æ–ª—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 3000));
        return waitForSecondResponse(formData, signal);
      }

      if (secondResult.message) {
        console.log('ü§ñ Valid second AI response received');

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        setIsWaitingForSecondResponse(false);
        const savedRecognizedText = firstAudioResponse;
        setFirstAudioResponse(null);

        // –°–ù–ê–ß–ê–õ–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (savedRecognizedText) {
          addMessage({
            text: savedRecognizedText,
            isUser: true,
            dayId: selectedDay.id
          });
        }

        // –ü–û–¢–û–ú –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π AI –æ—Ç–≤–µ—Ç
        processMessageSequence({
          ...secondResult,
          recognizedText: savedRecognizedText || undefined
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        if (onWorkoutSaved && (secondResult.workout_logged || (secondResult.parsed_exercises && secondResult.parsed_exercises.length > 0))) {
          console.log('üîÑ Notifying about workout data update...');
          onWorkoutSaved();
        }
        console.log('‚úÖ Two-stage audio processing completed successfully');
      } else {
        throw new Error('Second response does not contain AI message');
      }

    } catch (error) {
      clearTimeout(secondTimeoutId);
      if (error instanceof Error && error.name === 'AbortError') {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å—é
  const startRecording = async () => {
    try {
      console.log('üé§ Starting audio recording...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ');
      }

      console.log('üé§ Requesting microphone access...');
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          sampleRate: 44100
        } 
      });
      console.log('‚úÖ Microphone access granted');

      console.log('üé§ Creating MediaRecorder...');
      const recorder = new MediaRecorder(stream, {
        mimeType: MediaRecorder.isTypeSupported('audio/webm') ? 'audio/webm' : 'audio/wav'
      });
      console.log('‚úÖ MediaRecorder created with mimeType:', recorder.mimeType);
      
      const chunks: Blob[] = [];
      
      recorder.ondataavailable = (event) => {
        console.log('üìä Audio data chunk received:', event.data.size, 'bytes');
        if (event.data.size > 0) {
          chunks.push(event.data);
        }
      };
      
      recorder.onstop = () => {
        console.log('üé§ Recording stopped, total chunks:', chunks.length);
        setIsRecording(false);
        setIsProcessingAudio(true);
        
        const audioBlob = new Blob(chunks, { type: recorder.mimeType || 'audio/wav' });
        console.log('üéµ Audio blob created:', {
          size: audioBlob.size,
          type: audioBlob.type,
          chunks: chunks.length
        });
        
        handleAudioMessage(audioBlob);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
        console.log('üé§ Stopping audio tracks...');
        stream.getTracks().forEach(track => {
          console.log('üé§ Stopping track:', track.kind, track.label);
          track.stop();
        });
      };

      recorder.onerror = (event) => {
        console.error('‚ùå MediaRecorder error:', event);
        setIsRecording(false);
        setIsProcessingAudio(false);
      };
      
      setMediaRecorder(recorder);
      setIsRecording(true);
      
      recorder.start();
      console.log('‚úÖ Recording started successfully');
      
    } catch (error) {
      console.error('‚ùå Error starting recording:');
      console.error('‚ùå Error type:', error instanceof Error ? error.constructor.name : typeof error);
      console.error('‚ùå Error message:', error instanceof Error ? error.message : String(error));
      
      setIsRecording(false);
      setIsProcessingAudio(false);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMsg = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: ${errorMsg}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.`);
    }
  };

  const stopRecording = () => {
    if (mediaRecorder && mediaRecorder.state === 'recording') {
      console.log('üé§ Stopping recording...');
      console.log('üé§ MediaRecorder state before stop:', mediaRecorder.state);
      mediaRecorder.stop();
      console.log('üé§ Stop command sent to MediaRecorder');
    } else {
      console.warn('‚ö†Ô∏è Cannot stop recording:', {
        hasMediaRecorder: !!mediaRecorder,
        state: mediaRecorder?.state || 'no recorder'
      });
    }
  };

  const handleAudioMessage = async (audioBlob: Blob) => {
    if (!selectedDay) {
      console.error('‚ùå Audio processing failed: No selected day');
      setIsProcessingAudio(false);
      return;
    }

    console.log('üéµ Starting audio processing...');
    console.log('üìä Audio details:', {
      size: audioBlob.size,
      type: audioBlob.type,
      userId: selectedUser.id,
      dayId: selectedDay.id
    });

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      if (audioBlob.size === 0) {
        throw new Error('–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π');
      }

      if (audioBlob.size > 10 * 1024 * 1024) { // 10MB limit
        throw new Error('–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–ª–∏–º–∏—Ç 10MB)');
      }
      
      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
      const formData = new FormData();
      formData.append('audio', audioBlob, 'voice-message.wav');
      formData.append('userId', selectedUser.id);
      formData.append('dayId', selectedDay.id);
      formData.append('isAudio', 'true'); // –§–ª–∞–≥ —á—Ç–æ —ç—Ç–æ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      
      console.log('üì§ Sending audio to /api/process-message...');
      console.log('üìã FormData entries:');
      for (const [key, value] of formData.entries()) {
        if (key === 'audio') {
          console.log(`  ${key}: [Blob ${(value as Blob).size} bytes]`);
        } else {
          console.log(`  ${key}: ${value}`);
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –æ–∂–∏–¥–∞–Ω–∏–∏
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

      let response: Response;
      try {
        response = await fetch('/api/process-message', {
          method: 'POST',
          body: formData,
          signal: controller.signal
        });
        clearTimeout(timeoutId);
      } catch (error) {
        clearTimeout(timeoutId);
        if (error instanceof Error && error.name === 'AbortError') {
          throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (30 —Å–µ–∫)');
        }
        throw error;
      }

      console.log('üì° Response status:', response.status, response.statusText);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Server error response:', errorText);
        throw new Error(`Server error ${response.status}: ${errorText}`);
      }

      console.log('üì® Reading response...');
      const rawResult = await response.json();
      console.log('‚úÖ Raw server response:', JSON.stringify(rawResult, null, 2));
      
      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç webhook —Å –ø–æ–º–æ—â—å—é –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
      console.log('üîÑ Parsing webhook response...');
      const result = parseWebhookResponse(rawResult);
      console.log('üìã Parsed result:', {
        recognizedText: result.recognizedText,
        hasMessage: !!result.message,
        isFirstAudioResponse: result.isFirstAudioResponse,
        messageLength: result.message?.length || 0,
        success: result.success
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (!result.message && !result.recognizedText) {
        console.warn('‚ö†Ô∏è No message or recognized text in audio response');
        console.warn('‚ö†Ô∏è Raw result structure:', Object.keys(rawResult));
        console.warn('‚ö†Ô∏è Parsed result details:', {
          message: result.message,
          recognizedText: result.recognizedText,
          success: result.success
        });
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞—É–¥–∏–æ
      if (result.isFirstAudioResponse && result.recognizedText) {
        console.log('üé§ First audio response detected - NOT showing recognized text yet');

        // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ä–∞–∑—É - –ø–æ–∫–∞–∂–µ–º –≤ –∫–æ–Ω—Ü–µ —Å AI –æ—Ç–≤–µ—Ç–æ–º

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        setFirstAudioResponse(result.recognizedText);
        setIsWaitingForSecondResponse(true);

        console.log('‚è≥ Waiting for second AI response...');

        // –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–æ–≥–æ –∂–µ webhook
        try {
          await waitForSecondResponse(formData, controller.signal);
        } catch (secondError) {
          console.error('‚ùå Error waiting for second response:', secondError);
          setIsWaitingForSecondResponse(false);
          setFirstAudioResponse(null);
          throw secondError;
        }
        return;
      }


      // –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ AI –æ—Ç–≤–µ—Ç–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
      if (result.recognizedText && !result.message && !result.isFirstAudioResponse) {
        console.log('üé§ Legacy: Only recognized text found, displaying it as user message');
        addMessage({
          text: result.recognizedText,
          isUser: true,
          dayId: selectedDay.id
        });
        return;
      }
      
      console.log('üîÑ Processing message sequence...');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
      processMessageSequence(result, result.recognizedText);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
      if (onWorkoutSaved && (result.workout_logged || (result.parsed_exercises && result.parsed_exercises.length > 0))) {
        console.log('üîÑ Notifying about workout data update...');
        onWorkoutSaved();
      }

      console.log('‚úÖ Audio processing completed successfully');
      
    } catch (error) {
      console.error('‚ùå Error processing audio:');
      console.error('‚ùå Error type:', error instanceof Error ? error.constructor.name : typeof error);
      console.error('‚ùå Error message:', error instanceof Error ? error.message : String(error));
      console.error('‚ùå Error stack:', error instanceof Error ? error.stack : 'No stack trace');
      
      addMessage({
        text: t('chat.audioProcessingError'),
        isUser: false,
        dayId: selectedDay.id
      });
    } finally {
      console.log('üèÅ Setting isProcessingAudio to false');
      setIsProcessingAudio(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (!isInitialized) {
    return (
      <div className="flex flex-col h-full bg-white rounded-lg shadow-sm border border-primary-200">
        <div className="flex-1 flex items-center justify-center">
          <div className="text-primary-600">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col">
      {/* Chat Header - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className="bg-white sm:rounded-t-lg sm:shadow-sm sm:border sm:border-gray-200 sm:border-b-0">
        <div className="flex items-center space-x-3 p-4 sm:p-6 border-b border-gray-200">
          <div className="w-10 h-10 bg-primary-100 rounded-lg flex items-center justify-center">
            <MessageCircle className="w-5 h-5 text-primary-600" />
          </div>
          <div>
            <h2 className="text-lg font-semibold text-gray-900">–ß–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º</h2>
            <p className="text-sm text-gray-500">
              {selectedDay ? `${new Date(selectedDay.date + 'T00:00:00').toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', weekday: 'short' })}` : '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å'}
            </p>
          </div>
        </div>
      </div>

      {/* Chat Content - —Å–∫—Ä–æ–ª–ª—è—â–∞—è—Å—è –æ–±–ª–∞—Å—Ç—å */}
      <div className="flex-1 bg-white sm:rounded-b-lg sm:shadow-sm sm:border sm:border-gray-200 sm:border-t-0 flex flex-col" style={{ minHeight: 0 }}>
        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-3 sm:p-6 space-y-4" style={{ minHeight: 0 }}>
        <AnimatePresence>
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              transition={{ duration: 0.3, ease: "easeOut" }}
              className={`flex ${message.isUser ? "justify-end" : "justify-start"}`}
            >
              <div
                className={`max-w-[90%] sm:max-w-[80%] rounded-2xl px-3 sm:px-4 py-2 sm:py-3 ${
                  message.isUser
                    ? "text-white"
                    : "bg-primary-50 text-primary-900 border border-primary-200"
                }`}
                style={message.isUser ? { background: 'var(--gradient-accent)' } : {}}
              >
                {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å */}
                {message.hasPhoto && message.photoPreview && (
                  <div className="mb-3">
                    <img 
                      src={message.photoPreview} 
                      alt="Attached photo"
                      className="max-w-full max-h-64 rounded-lg object-cover border border-gray-200"
                    />
                  </div>
                )}
                
                <div className="whitespace-pre-line text-sm leading-relaxed">
                  {!message.isUser && typingMessageId === message.id ? (
                    <TypewriterText 
                      text={message.text}
                      speed={15}
                      onComplete={() => setTypingMessageId(null)}
                    />
                  ) : (
                    message.text
                  )}
                </div>
                <p className={`text-xs mt-2 opacity-70 ${message.isUser ? "text-white" : "text-primary-500"}`}>
                  {message.timestamp.toLocaleTimeString("ru-RU", {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </p>
              </div>
            </motion.div>
          ))}
        </AnimatePresence>
        
        {isLoading && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="flex justify-start"
          >
            <div className="bg-primary-100 rounded-2xl px-4 py-3 flex items-center space-x-2">
              {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä—ã–≥–∞—é—â–∏–µ —Ç–æ—á–∫–∏ */}
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-primary-600 rounded-full animate-bounce" style={{ animationDelay: '0s' }}></div>
                <div className="w-2 h-2 bg-primary-600 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-2 h-2 bg-primary-600 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>
              <span className="text-sm text-primary-600">
                –ü–µ—á–∞—Ç–∞–µ—Ç... {loadingTimer > 5 && <span className="opacity-70">({loadingTimer}—Å)</span>}
              </span>
            </div>
          </motion.div>
        )}
        
        {isProcessingAudio && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="flex justify-start"
          >
            <div className="bg-blue-100 rounded-2xl px-4 py-3 flex items-center space-x-3">
              {/* –ó–≤—É–∫–æ–≤—ã–µ –≤–æ–ª–Ω—ã –∞–Ω–∏–º–∞—Ü–∏—è */}
              <div className="flex items-center space-x-1">
                <motion.div
                  className="w-1 bg-blue-600 rounded-full"
                  animate={{ height: [4, 12, 4] }}
                  transition={{ repeat: Infinity, duration: 0.8, delay: 0 }}
                />
                <motion.div
                  className="w-1 bg-blue-600 rounded-full"
                  animate={{ height: [4, 16, 4] }}
                  transition={{ repeat: Infinity, duration: 0.8, delay: 0.1 }}
                />
                <motion.div
                  className="w-1 bg-blue-600 rounded-full"
                  animate={{ height: [4, 10, 4] }}
                  transition={{ repeat: Infinity, duration: 0.8, delay: 0.2 }}
                />
                <motion.div
                  className="w-1 bg-blue-600 rounded-full"
                  animate={{ height: [4, 14, 4] }}
                  transition={{ repeat: Infinity, duration: 0.8, delay: 0.3 }}
                />
                <motion.div
                  className="w-1 bg-blue-600 rounded-full"
                  animate={{ height: [4, 8, 4] }}
                  transition={{ repeat: Infinity, duration: 0.8, delay: 0.4 }}
                />
              </div>
              <span className="text-sm text-blue-600">
                üé§ {isWaitingForSecondResponse ? '–û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç –ò–ò...' : t('chat.recording')} {processingTimer > 5 && <span className="opacity-70">({processingTimer}—Å)</span>}
              </span>
            </div>
          </motion.div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="border-t border-primary-200 p-3 sm:p-6 bg-gray-50/50">
        <div className="flex space-x-2 sm:space-x-3">
          <div className="flex-1 relative">
            <textarea
              value={inputMessage}
              onChange={(e) => {
                setInputMessage(e.target.value);
                // Auto-resize textarea
                const target = e.target as HTMLTextAreaElement;
                target.style.height = '48px';
                target.style.height = Math.min(target.scrollHeight, 120) + 'px';
              }}
              onKeyPress={handleKeyPress}
              placeholder={t('chat.placeholder')}
              rows={1}
              className="w-full px-3 sm:px-4 py-2 sm:py-3 bg-primary-50 border border-primary-200 rounded-2xl resize-none focus:outline-none focus:ring-2 focus:ring-primary-600 focus:border-transparent text-sm text-primary-900 placeholder:text-xs sm:placeholder:text-sm placeholder:text-primary-500"
              style={{
                minHeight: "48px",
                maxHeight: "120px",
                overflow: inputMessage.length > 50 ? 'auto' : 'hidden'
              }}
            />
          </div>
          
          {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
          <input
            type="file"
            accept="image/*"
            onChange={handlePhotoSelect}
            className="hidden"
            id="photo-upload"
          />

          {/* –ö–Ω–æ–ø–∫–∞-—Å–∫—Ä–µ–ø–∫–∞ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é */}
          <div className="relative attachment-menu-container">
            <button
              onClick={() => setIsAttachmentMenuOpen(!isAttachmentMenuOpen)}
              disabled={isLoading || isRecording}
              className="flex items-center justify-center w-10 h-10 sm:w-12 sm:h-12 text-primary-600 bg-white border-2 border-primary-200 rounded-2xl hover:bg-primary-50 hover:border-primary-300 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
              title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª"
            >
              <Paperclip className="w-5 h-5" />
            </button>

            {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é */}
            <AnimatePresence>
              {isAttachmentMenuOpen && (
                <motion.div
                  initial={{ opacity: 0, y: 10, scale: 0.95 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: 10, scale: 0.95 }}
                  transition={{ duration: 0.15 }}
                  className="absolute bottom-full mb-2 bg-white border border-gray-200 rounded-xl shadow-lg py-2 min-w-[160px] z-50"
                >
                  <button
                    onClick={() => {
                      document.getElementById('photo-upload')?.click();
                      setIsAttachmentMenuOpen(false);
                    }}
                    disabled={isLoading || isRecording}
                    className="w-full flex items-center space-x-3 px-4 py-3 hover:bg-gray-50 transition-colors text-left disabled:opacity-50"
                  >
                    <Image className="w-5 h-5 text-blue-600" />
                    <span className="text-sm text-gray-700">{t('chat.selectPhoto')}</span>
                  </button>

                  <button
                    onClick={() => {
                      startCamera();
                      setIsAttachmentMenuOpen(false);
                    }}
                    disabled={isLoading || isRecording}
                    className="w-full flex items-center space-x-3 px-4 py-3 hover:bg-gray-50 transition-colors text-left disabled:opacity-50"
                  >
                    <Camera className="w-5 h-5 text-green-600" />
                    <span className="text-sm text-gray-700">{t('chat.takePhoto')}</span>
                  </button>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ */}
          <motion.button
            onClick={isRecording ? stopRecording : startRecording}
            disabled={isLoading || isProcessingAudio}
            className={`flex items-center justify-center w-10 h-10 sm:w-12 sm:h-12 text-white rounded-2xl transition-all ${
              isRecording 
                ? 'bg-red-500 hover:bg-red-600' 
                : 'bg-blue-500 hover:bg-blue-600'
            } disabled:opacity-50 disabled:cursor-not-allowed`}
            animate={isRecording ? { scale: [1, 1.1, 1] } : {}}
            transition={{ repeat: isRecording ? Infinity : 0, duration: 1 }}
          >
            {isRecording ? <Square className="w-4 h-4" /> : <Mic className="w-5 h-5" />}
          </motion.button>
          
          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞/—Ñ–æ—Ç–æ */}
          <button
            onClick={handleSendMessage}
            disabled={(!inputMessage.trim() && !selectedPhoto) || isLoading || isRecording || isProcessingAudio}
            className="flex items-center justify-center w-10 h-10 sm:w-12 sm:h-12 text-white rounded-2xl hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
            style={{ background: 'var(--gradient-accent)' }}
          >
            <Send className="w-5 h-5" />
          </button>
        </div>
        
        {/* –ü—Ä–µ–≤—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ */}
        {photoPreview && (
          <div className="mt-3 p-3 bg-primary-50 border border-primary-200 rounded-lg">
            <div className="flex items-start space-x-3">
              <img 
                src={photoPreview} 
                alt="Selected photo preview"
                className="w-20 h-20 object-cover rounded-lg border border-gray-300"
              />
              <div className="flex-1">
                <p className="text-sm text-primary-700 font-medium">üì∑ {t('chat.photoReady')}</p>
                <p className="text-xs text-primary-500 mt-1">
                  {selectedPhoto && `${Math.round(selectedPhoto.size / 1024)}KB`}
                </p>
              </div>
              <button
                onClick={removePhoto}
                className="text-primary-500 hover:text-red-500 transition-colors"
                title={t('chat.removePhoto')}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
        )}
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞–º–µ—Ä—ã */}
      {isTakingPhoto && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-4 rounded-xl max-w-sm w-full mx-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">{t('chat.takePhoto')}</h3>
              <button
                onClick={stopCamera}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            
            <div className="relative mb-4">
              {cameraStream && (
                <video
                  id="camera-video"
                  autoPlay
                  playsInline
                  muted
                  className="w-full h-64 object-cover rounded-lg bg-gray-100"
                  ref={(video) => {
                    if (video && cameraStream) {
                      video.srcObject = cameraStream;
                    }
                  }}
                />
              )}
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={capturePhoto}
                className="flex-1 bg-primary-600 text-white py-3 rounded-lg font-medium hover:bg-primary-700 transition-colors"
              >
                üì∏ {t('chat.takePhoto')}
              </button>
              <button
                onClick={stopCamera}
                className="px-4 py-3 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                {t('common.cancel')}
              </button>
            </div>
          </div>
        </div>
      )}
      </div>
    </div>
  );
}