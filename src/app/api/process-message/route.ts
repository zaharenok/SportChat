import { NextRequest, NextResponse } from 'next/server'
import { chatDb, workoutsDb, goalsDb } from '@/lib/redis-db'
import type { Exercise, Goal } from '@/lib/redis-db'

export async function POST(request: NextRequest) {
  try {
    const { userId, dayId, message } = await request.json()
    
    if (!userId || !dayId || !message) {
      return NextResponse.json({ 
        error: 'userId, dayId, and message are required' 
      }, { status: 400 })
    }

    console.log('üì® Processing message:', { userId, dayId, message })

    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userMessage = await chatDb.create(userId, dayId, message, true)
    console.log('üíæ User message saved:', userMessage.id)

    // 2. –í—ã–∑—ã–≤–∞–µ–º webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const webhookUrl = process.env.WEBHOOK_URL
    if (!webhookUrl) {
      throw new Error('Webhook URL not configured')
    }

    const webhookResponse = await fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
      },
      body: JSON.stringify({
        message,
        user_email: "test@example.com", // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }),
    })

    if (!webhookResponse.ok) {
      throw new Error(`Webhook failed: ${webhookResponse.status}`)
    }

    const webhookData = await webhookResponse.json()
    console.log('üéØ Webhook response:', webhookData)

    const output = webhookData.output
    if (!output) {
      throw new Error('Invalid webhook response structure')
    }

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã
    if (output.message) {
      const botMessage = await chatDb.create(userId, dayId, output.message, false)
      console.log('ü§ñ Bot message saved:', botMessage.id)
    }

    // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏
    if (output.workout_logged && output.parsed_exercises && output.parsed_exercises.length > 0) {
      console.log('üèãÔ∏è Processing workout:', output.parsed_exercises)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
      const workout = await workoutsDb.create(
        userId,
        dayId,
        userMessage.id, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        output.parsed_exercises
      )
      console.log('‚úÖ Workout saved:', workout.id)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏
      await updateGoalsFromExercises(output.parsed_exercises, userId)
    }

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (output.suggestions && output.suggestions.length > 0) {
      const suggestionsText = "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + output.suggestions.map((s: string, i: number) => `${i + 1}. ${s}`).join("\n")
      const suggestionsMessage = await chatDb.create(userId, dayId, suggestionsText, false)
      console.log('üí° Suggestions saved:', suggestionsMessage.id)
    }

    return NextResponse.json({
      success: true,
      userMessage,
      workout_logged: output.workout_logged,
      parsed_exercises: output.parsed_exercises || [],
      message: output.message
    })

  } catch (error) {
    console.error('‚ùå Error processing message:', error)
    return NextResponse.json({ 
      error: 'Failed to process message',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
async function updateGoalsFromExercises(exercises: Exercise[], userId: string) {
  try {
    console.log("üéØ Checking goals for exercise updates...")
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const goals = await goalsDb.getByUser(userId)
    console.log("üìã User goals:", goals.map((g: Goal) => ({ title: g.title, current: g.current_value, target: g.target_value })))
    
    for (const exercise of exercises) {
      const exerciseName = exercise.name.toLowerCase()
      const totalReps = exercise.reps * exercise.sets
      
      console.log(`üèãÔ∏è Processing exercise: ${exerciseName}, total reps: ${totalReps}`)
      
      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ü–µ–ª–∏
      for (const goal of goals) {
        const goalTitle = goal.title.toLowerCase()
        console.log(`üîç Comparing exercise "${exerciseName}" with goal "${goalTitle}"`)
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ —Ü–µ–ª–µ–π
        const isMatchingGoal = 
          // –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è - —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã
          ((exerciseName.includes("–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏") || exerciseName.includes("–ø–æ–¥—Ç—è–≥–∏–≤–∞")) && 
           (goalTitle.includes("–ø–æ–¥—Ç—è–≥–∏–≤–∞") || goalTitle.includes("–ø–æ–¥—Ç—è–≥–∞—Ç") || goalTitle.includes("–ø–æ–¥—Ç—è–Ω—É—Ç"))) ||
          // –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è  
          ((exerciseName.includes("–ø—Ä–∏—Å–µ–¥–∞–Ω–∏") || exerciseName.includes("–ø—Ä–∏—Å–µ–¥–∞")) && 
           (goalTitle.includes("–ø—Ä–∏—Å–µ–¥–∞") || goalTitle.includes("–ø—Ä–∏—Å–µ—Å—Ç"))) ||
          // –û—Ç–∂–∏–º–∞–Ω–∏—è
          ((exerciseName.includes("–æ—Ç–∂–∏–º–∞–Ω–∏") || exerciseName.includes("–æ—Ç–∂–∏–º–∞")) && 
           (goalTitle.includes("–æ—Ç–∂–∏–º–∞") || goalTitle.includes("–æ—Ç–∂–∞—Ç"))) ||
          // –ü–ª–∞–Ω–∫–∞
          (exerciseName.includes("–ø–ª–∞–Ω–∫") && goalTitle.includes("–ø–ª–∞–Ω–∫")) ||
          // –ü—Ä–µ—Å—Å
          (exerciseName.includes("–ø—Ä–µ—Å—Å") && goalTitle.includes("–ø—Ä–µ—Å—Å"))
        
        console.log(`ü§î Is matching goal? ${isMatchingGoal}`)
        
        if (isMatchingGoal) {
          const newValue = Math.max(0, goal.current_value - totalReps)
          console.log(`üéØ Updating goal "${goal.title}": ${goal.current_value} - ${totalReps} = ${newValue}`)
          
          try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å
            const updatedGoal = await goalsDb.update(goal.id, {
              currentValue: newValue,
              isCompleted: newValue <= 0
            })
            
            console.log(`‚úÖ Goal updated successfully:`, updatedGoal)
            console.log(`üìä Progress: ${newValue}/${goal.target_value} (${Math.round((newValue/goal.target_value)*100)}%)`)
          } catch (error) {
            console.error(`‚ùå Failed to update goal "${goal.title}":`, error)
          }
        } else {
          console.log(`‚è≠Ô∏è Goal "${goalTitle}" doesn't match exercise "${exerciseName}"`)
        }
      }
    }
  } catch (error) {
    console.error("‚ùå Error updating goals from exercises:", error)
  }
}