import { NextRequest, NextResponse } from 'next/server'
import { chatDb, workoutsDb, goalsDb, achievementsDb } from '@/lib/redis-db'
import type { Exercise, Goal } from '@/lib/redis-db'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ü–µ–ª–∏
function getGoalIcon(goalTitle: string): string {
  const title = goalTitle.toLowerCase()
  
  if (title.includes('–ø–æ–¥—Ç—è–≥–∏–≤–∞') || title.includes('–ø–æ–¥—Ç—è–Ω—É—Ç')) return 'üí™'
  if (title.includes('–ø—Ä–∏—Å–µ–¥–∞') || title.includes('–ø—Ä–∏—Å–µ—Å—Ç')) return 'ü¶µ'
  if (title.includes('–æ—Ç–∂–∏–º–∞') || title.includes('–æ—Ç–∂–∞—Ç')) return 'üí•'
  if (title.includes('–ø–ª–∞–Ω–∫')) return '‚è±Ô∏è'
  if (title.includes('–ø—Ä–µ—Å—Å')) return 'üî•'
  if (title.includes('–±–µ–≥') || title.includes('–∫–∞—Ä–¥–∏–æ')) return 'üèÉ'
  if (title.includes('–π–æ–≥–∞') || title.includes('—Ä–∞—Å—Ç—è–∂–∫')) return 'üßò'
  
  return 'üèÜ' // –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞
}

export async function POST(request: NextRequest) {
  try {
    const { userId, dayId, message } = await request.json()
    
    if (!userId || !dayId || !message) {
      return NextResponse.json({ 
        error: 'userId, dayId, and message are required' 
      }, { status: 400 })
    }

    console.log('üì® Processing message:', { userId, dayId, message })

    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userMessage = await chatDb.create(userId, dayId, message, true)
    console.log('üíæ User message saved:', userMessage.id)

    // 2. –í—ã–∑—ã–≤–∞–µ–º webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const webhookUrl = process.env.WEBHOOK_URL
    if (!webhookUrl) {
      throw new Error('Webhook URL not configured')
    }

    const webhookResponse = await fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
      },
      body: JSON.stringify({
        message,
        user_email: "test@example.com", // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }),
    })

    if (!webhookResponse.ok) {
      throw new Error(`Webhook failed: ${webhookResponse.status}`)
    }

    const webhookData = await webhookResponse.json()
    console.log('üéØ Webhook response:', webhookData)

    // Webhook –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const firstResponse = Array.isArray(webhookData) ? webhookData[0] : webhookData
    const output = firstResponse?.output
    if (!output) {
      throw new Error('Invalid webhook response structure')
    }

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã
    if (output.message) {
      const botMessage = await chatDb.create(userId, dayId, output.message, false)
      console.log('ü§ñ Bot message saved:', botMessage.id)
    }

    // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏
    if (output.workout_logged && output.parsed_exercises && output.parsed_exercises.length > 0) {
      console.log('üèãÔ∏è Processing workout:', output.parsed_exercises)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
      const workout = await workoutsDb.create(
        userId,
        dayId,
        userMessage.id, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        output.parsed_exercises
      )
      console.log('‚úÖ Workout saved:', workout.id)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ò —á–∞—Å—Ç–æ—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      const goalUpdates = await updateGoalsFromExercises(output.parsed_exercises, userId, message)
      const frequencyUpdates = await updateFrequencyGoals(userId)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Ü–µ–ª–µ–π
      const allUpdates = [...goalUpdates, ...frequencyUpdates]
      if (allUpdates.length > 0) {
        for (const update of allUpdates) {
          const goalMessage = await chatDb.create(userId, dayId, update, false)
          console.log('üéØ Goal progress message saved:', goalMessage.id)
        }
      }
    }

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    console.log('üîç Checking suggestions:', {
      hasSuggestions: !!output.suggestions,
      suggestionsCount: output.suggestions?.length || 0,
      suggestions: output.suggestions
    })
    
    if (output.suggestions && output.suggestions.length > 0) {
      const suggestionsText = "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + output.suggestions.map((s: string, i: number) => `${i + 1}. ${s}`).join("\n")
      console.log('üí° Creating suggestions message:', suggestionsText)
      const suggestionsMessage = await chatDb.create(userId, dayId, suggestionsText, false)
      console.log('üí° Suggestions saved:', suggestionsMessage.id)
    } else {
      console.log('‚ö†Ô∏è No suggestions to save')
    }

    return NextResponse.json({
      success: true,
      userMessage,
      workout_logged: output.workout_logged,
      parsed_exercises: output.parsed_exercises || [],
      message: output.message
    })

  } catch (error) {
    console.error('‚ùå Error processing message:', error)
    return NextResponse.json({ 
      error: 'Failed to process message',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
async function updateGoalsFromExercises(exercises: Exercise[], userId: string, originalMessage: string): Promise<string[]> {
  const messages: string[] = []
  
  try {
    console.log("üéØ Checking goals for exercise updates...")
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const goals = await goalsDb.getByUser(userId)
    console.log("üìã User goals:", goals.map((g: Goal) => ({ title: g.title, current: g.current_value, target: g.target_value })))
    
    for (const exercise of exercises) {
      const exerciseName = exercise.name.toLowerCase()
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
      const isCardio = exerciseName.includes("—Ö–æ–¥—å–±") || exerciseName.includes("–ø—Ä–æ–≥—É–ª") || 
                      exerciseName.includes("–≥—É–ª—è–ª") || exerciseName.includes("—à–µ–ª") || 
                      exerciseName.includes("–∏–¥—Ç–∏") || exerciseName.includes("–±–µ–≥") || 
                      exerciseName.includes("–±–µ–∂–∞–ª") || exerciseName.includes("–ø—Ä–æ–±–µ–∂")
      
      // –î–ª—è –∫–∞—Ä–¥–∏–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º reps –∫–∞–∫ –∫–∏–ª–æ–º–µ—Ç—Ä—ã, –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π - reps * sets
      let exerciseValue = isCardio ? exercise.reps : exercise.reps * exercise.sets
      
      // –§–û–õ–õ–ë–≠–ö: –ï—Å–ª–∏ –∫–∞—Ä–¥–∏–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ reps = 1, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (isCardio && exercise.reps === 1) {
        console.log(`‚ö†Ô∏è Cardio exercise "${exerciseName}" has reps=1, parsing distance from: "${originalMessage}"`)
        
        // –ò—â–µ–º —á–∏—Å–ª–∞ —Å –∫–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        const distanceMatch = originalMessage.toLowerCase().match(/(\d+(?:\.\d+)?)\s*–∫–º/);
        if (distanceMatch) {
          const parsedDistance = parseFloat(distanceMatch[1]);
          console.log(`‚úÖ Found distance in message: ${parsedDistance} –∫–º`);
          exerciseValue = parsedDistance;
        } else {
          console.log(`‚ùå Could not parse distance from message, using default: ${exerciseValue} –∫–º`);
        }
      }
      
      const unit = isCardio ? "–∫–º" : "—Ä–∞–∑"
      
      console.log(`üèãÔ∏è Processing exercise: ${exerciseName}, value: ${exerciseValue} ${unit} (cardio: ${isCardio})`)
      
      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ü–µ–ª–∏
      for (const goal of goals) {
        const goalTitle = goal.title.toLowerCase()
        console.log(`üîç Comparing exercise "${exerciseName}" with goal "${goalTitle}"`)
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ —Ü–µ–ª–µ–π
        const isMatchingGoal = 
          // –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è - —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã
          ((exerciseName.includes("–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏") || exerciseName.includes("–ø–æ–¥—Ç—è–≥–∏–≤–∞")) && 
           (goalTitle.includes("–ø–æ–¥—Ç—è–≥–∏–≤–∞") || goalTitle.includes("–ø–æ–¥—Ç—è–≥–∞—Ç") || goalTitle.includes("–ø–æ–¥—Ç—è–Ω—É—Ç"))) ||
          // –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è  
          ((exerciseName.includes("–ø—Ä–∏—Å–µ–¥–∞–Ω–∏") || exerciseName.includes("–ø—Ä–∏—Å–µ–¥–∞")) && 
           (goalTitle.includes("–ø—Ä–∏—Å–µ–¥–∞") || goalTitle.includes("–ø—Ä–∏—Å–µ—Å—Ç"))) ||
          // –û—Ç–∂–∏–º–∞–Ω–∏—è
          ((exerciseName.includes("–æ—Ç–∂–∏–º–∞–Ω–∏") || exerciseName.includes("–æ—Ç–∂–∏–º–∞")) && 
           (goalTitle.includes("–æ—Ç–∂–∏–º–∞") || goalTitle.includes("–æ—Ç–∂–∞—Ç"))) ||
          // –ü–ª–∞–Ω–∫–∞
          (exerciseName.includes("–ø–ª–∞–Ω–∫") && goalTitle.includes("–ø–ª–∞–Ω–∫")) ||
          // –ü—Ä–µ—Å—Å
          (exerciseName.includes("–ø—Ä–µ—Å—Å") && goalTitle.includes("–ø—Ä–µ—Å—Å")) ||
          // –ö–∞—Ä–¥–∏–æ - —Ö–æ–¥—å–±–∞/–ø—Ä–æ–≥—É–ª–∫–∏
          ((exerciseName.includes("—Ö–æ–¥—å–±") || exerciseName.includes("–ø—Ä–æ–≥—É–ª") || exerciseName.includes("–≥—É–ª—è–ª") || exerciseName.includes("—à–µ–ª") || exerciseName.includes("–∏–¥—Ç–∏")) && 
           (goalTitle.includes("—Ö–æ–¥—å–±") || goalTitle.includes("–ø—Ä–æ–≥—É–ª") || goalTitle.includes("–ø—Ä–æ—Ö–æ–¥–∏—Ç—å") || goalTitle.includes("–∫–º"))) ||
          // –ö–∞—Ä–¥–∏–æ - –±–µ–≥
          ((exerciseName.includes("–±–µ–≥") || exerciseName.includes("–±–µ–∂–∞–ª") || exerciseName.includes("–ø—Ä–æ–±–µ–∂")) && 
           (goalTitle.includes("–±–µ–≥") || goalTitle.includes("–±–µ–∂–∞—Ç—å") || goalTitle.includes("–ø—Ä–æ–±–µ–∂–∞—Ç—å") || goalTitle.includes("–∫–º")))
        
        console.log(`ü§î Is matching goal? ${isMatchingGoal}`)
        
        if (isMatchingGoal) {
          const newValue = Math.min(goal.target_value, goal.current_value + exerciseValue)
          console.log(`üéØ Updating goal "${goal.title}": ${goal.current_value} + ${exerciseValue} = ${newValue}`)
          
          try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å
            const updatedGoal = await goalsDb.update(goal.id, {
              currentValue: newValue,
              isCompleted: newValue >= goal.target_value
            })
            
            console.log(`‚úÖ Goal updated successfully:`, updatedGoal)
            console.log(`üìä Progress: ${newValue}/${goal.target_value} (${Math.round((newValue/goal.target_value)*100)}%)`)
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
            const goalUnit = isCardio ? "–∫–º" : (goal.unit || '—Ä–∞–∑')
            
            // –ï—Å–ª–∏ —Ü–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Ü–µ–ª—å
            if (newValue >= goal.target_value) {
              console.log(`üéâ Goal completed! Creating achievement...`)
              
              messages.push(`üéâ –¶–µ–ª—å "${goal.title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –¥–æ—Å—Ç–∏–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ${goal.target_value} ${goalUnit}!`)
              
              try {
                // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                const achievement = await achievementsDb.create(
                  userId,
                  `–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ü–µ–ª—å: ${goal.title}`,
                  `–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ü–µ–ª—å "${goal.title}" (${goal.target_value} ${goalUnit})`,
                  getGoalIcon(goal.title)
                )
                
                console.log(`üèÜ Achievement created:`, achievement.title)
                
                // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ü–µ–ª—å
                await goalsDb.delete(goal.id)
                console.log(`üóëÔ∏è Completed goal deleted:`, goal.title)
                
              } catch (achievementError) {
                console.error(`‚ùå Failed to create achievement or delete goal:`, achievementError)
              }
            } else {
              // –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
              const remaining = goal.target_value - newValue
              const progress = Math.round((newValue / goal.target_value) * 100)
              messages.push(`üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª—å "${goal.title}": ${newValue}/${goal.target_value} ${goalUnit} (${progress}%). –û—Å—Ç–∞–ª–æ—Å—å: ${remaining} ${goalUnit}.`)
            }
          } catch (error) {
            console.error(`‚ùå Failed to update goal "${goal.title}":`, error)
          }
        } else {
          console.log(`‚è≠Ô∏è Goal "${goalTitle}" doesn't match exercise "${exerciseName}"`)
        }
      }
    }
  } catch (error) {
    console.error("‚ùå Error updating goals from exercises:", error)
  }
  
  return messages
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π –ø–æ —á–∞—Å—Ç–æ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é")
async function updateFrequencyGoals(userId: string): Promise<string[]> {
  const messages: string[] = []
  
  try {
    console.log("üìÖ Checking frequency goals...")
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const goals = await goalsDb.getByUser(userId)
    console.log("üìã User goals:", goals.map((g: Goal) => ({ title: g.title, current: g.current_value, target: g.target_value })))
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const allWorkouts = await workoutsDb.getByUser(userId)
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    const now = new Date()
    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
    
    const weeklyTrainingDays = new Set(
      allWorkouts
        .filter(workout => new Date(workout.created_at) >= weekAgo)
        .map(workout => new Date(workout.created_at).toISOString().split('T')[0])
    ).size
    
    console.log(`üìä Training days this week: ${weeklyTrainingDays}`)
    
    // –ò—â–µ–º —Ü–µ–ª–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    for (const goal of goals) {
      const goalTitle = goal.title.toLowerCase()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å —Ü–µ–ª—å—é –ø–æ —á–∞—Å—Ç–æ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      const isFrequencyGoal = 
        (goalTitle.includes("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞") && goalTitle.includes("—Ä–∞–∑") && goalTitle.includes("–Ω–µ–¥–µ–ª")) ||
        (goalTitle.includes("–∑–∞–Ω–∏–º–∞—Ç—å—Å—è") && goalTitle.includes("—Ä–∞–∑") && goalTitle.includes("–Ω–µ–¥–µ–ª")) ||
        (goalTitle.includes("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫") && goalTitle.includes("–Ω–µ–¥–µ–ª"))
      
      console.log(`üîç Goal "${goal.title}" is frequency goal: ${isFrequencyGoal}`)
      
      if (isFrequencyGoal) {
        const oldValue = goal.current_value
        const newValue = Math.min(goal.target_value, weeklyTrainingDays)
        console.log(`üìÖ Updating frequency goal "${goal.title}": current days = ${newValue}`)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if (newValue !== oldValue) {
          try {
            const updatedGoal = await goalsDb.update(goal.id, {
              currentValue: newValue,
              isCompleted: newValue >= goal.target_value
            })
            
            console.log(`‚úÖ Frequency goal updated successfully:`, updatedGoal)
            console.log(`üìä Progress: ${newValue}/${goal.target_value} training days`)
            
            // –ï—Å–ª–∏ —Ü–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Ü–µ–ª—å
            if (newValue >= goal.target_value) {
              console.log(`üéâ Frequency goal completed! Creating achievement...`)
              
              messages.push(`üéâ –¶–µ–ª—å "${goal.title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è ${goal.target_value} —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é!`)
              
              try {
                const achievement = await achievementsDb.create(
                  userId,
                  `–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ü–µ–ª—å: ${goal.title}`,
                  `–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ü–µ–ª—å "${goal.title}" (${goal.target_value} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)`,
                  'üóìÔ∏è'
                )
                
                console.log(`üèÜ Frequency achievement created:`, achievement.title)
                
                // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ü–µ–ª—å
                await goalsDb.delete(goal.id)
                console.log(`üóëÔ∏è Completed frequency goal deleted:`, goal.title)
                
              } catch (achievementError) {
                console.error(`‚ùå Failed to create frequency achievement:`, achievementError)
              }
            } else {
              // –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
              const remaining = goal.target_value - newValue
              const progress = Math.round((newValue / goal.target_value) * 100)
              messages.push(`üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª—å "${goal.title}": ${newValue}/${goal.target_value} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é (${progress}%). –û—Å—Ç–∞–ª–æ—Å—å: ${remaining} –¥–Ω–µ–π.`)
            }
          } catch (error) {
            console.error(`‚ùå Failed to update frequency goal "${goal.title}":`, error)
          }
        }
      }
    }
  } catch (error) {
    console.error("‚ùå Error updating frequency goals:", error)
  }
  
  return messages
}